// <auto-generated />
using InventoryApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace InventoryApp.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20210214215713_adds-min-level")]
    partial class addsminlevel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("InventoryApp.Models.Product", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("barcode")
                        .HasColumnType("text");

                    b.Property<string>("catergoryID")
                        .HasColumnType("text");

                    b.Property<string>("productImage")
                        .HasColumnType("text");

                    b.Property<string>("productName")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("catergoryID");

                    b.ToTable("products");
                });

            modelBuilder.Entity("InventoryApp.Models.Store", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("area")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<int>("code")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .HasColumnType("text");

                    b.Property<string>("province")
                        .HasColumnType("text");

                    b.Property<string>("streetName")
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("stores");
                });

            modelBuilder.Entity("InventoryApp.Models.StoreProducts", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<int>("minLevel")
                        .HasColumnType("integer");

                    b.Property<string>("productID")
                        .HasColumnType("text");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<double>("sellingPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("stockPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("storeID")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("productID");

                    b.HasIndex("storeID");

                    b.ToTable("storeProducts");
                });

            modelBuilder.Entity("InventoryApp.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("area")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<string>("dob")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("names")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("province")
                        .HasColumnType("text");

                    b.Property<string>("street")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("InventoryApp.Models.catergory", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("catergories");
                });

            modelBuilder.Entity("InventoryApp.Models.Product", b =>
                {
                    b.HasOne("InventoryApp.Models.catergory", "catergory")
                        .WithMany()
                        .HasForeignKey("catergoryID");

                    b.Navigation("catergory");
                });

            modelBuilder.Entity("InventoryApp.Models.StoreProducts", b =>
                {
                    b.HasOne("InventoryApp.Models.Product", "product")
                        .WithMany()
                        .HasForeignKey("productID");

                    b.HasOne("InventoryApp.Models.Store", "store")
                        .WithMany()
                        .HasForeignKey("storeID");

                    b.Navigation("product");

                    b.Navigation("store");
                });
#pragma warning restore 612, 618
        }
    }
}
